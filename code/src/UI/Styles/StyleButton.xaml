<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"                    
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:res="clr-namespace:Microsoft.Templates.UI.Resources"
                    xmlns:services="clr-namespace:Microsoft.Templates.UI.Services">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/_Colors.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/_FocusVisualStyles.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/_FontSizes.xaml" />
        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/_Thickness.xaml" />

        <ResourceDictionary Source="/Microsoft.Templates.UI;component/Styles/StyleTextBlock.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="Button" x:Key="BaseButtonNavigationStyle">
        <Setter Property="Foreground" Value="{StaticResource UIBlack}" />
        <Setter Property="BorderBrush" Value="{StaticResource UIBlack}" />
        <Setter Property="Background" Value="{StaticResource UIMiddleLightGray}" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleBlueGrid}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ButtonNavigationStyle" BasedOn="{StaticResource BaseButtonNavigationStyle}">
        <Setter Property="Margin" Value="{StaticResource Margin_M_Left}" />
        <Setter Property="Width" Value="75" />
        <Setter Property="Height" Value="27" />
    </Style>

    <Style TargetType="Button" x:Key="ButtonFinishStyle" BasedOn="{StaticResource ButtonNavigationStyle}">
        <Setter Property="Foreground" Value="{StaticResource UIWhite}" />
        <Setter Property="Background" Value="{StaticResource UIBlue}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleWhiteGrid}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ButtonRefreshTemplatesStyle" BasedOn="{StaticResource BaseButtonNavigationStyle}">
        <Setter Property="Height" Value="35" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Bottom" />
    </Style>



    <Style TargetType="Button" x:Key="BlueBaseTemplateInfoButtonStyle">
        <Setter Property="Foreground" Value="{StaticResource UIBlue}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleBlueEllipse}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Ellipse x:Name="mouseOverBackground" Visibility="Collapsed">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{StaticResource UIBlueColor}" Opacity="0.4"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="mouseOverBackground" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Foreground" Value="{StaticResource UILightGray}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="AddTemplateInfoButtonStyle" BasedOn="{StaticResource BlueBaseTemplateInfoButtonStyle}">
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonAddTemplate}" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonAddTemplate}" />
    </Style>

    <Style TargetType="Button" x:Key="SaveTemplateInfoButtonStyle" BasedOn="{StaticResource BlueBaseTemplateInfoButtonStyle}">
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonConfirmTemplate}" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonConfirmTemplate}" />
    </Style>



    <Style TargetType="Button" x:Key="BlackBaseTemplateInfoButtonStyle">
        <Setter Property="Foreground" Value="{StaticResource UIBlack}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleBlackEllipse}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Ellipse x:Name="mouseOverBackground" Visibility="Collapsed">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{StaticResource UIBlackColor}" Opacity="0.15"/>
                                </Ellipse.Fill>
                            </Ellipse>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="mouseOverBackground" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Foreground" Value="{StaticResource UILightGray}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="InfoTemplateInfoButtonStyle" BasedOn="{StaticResource BlackBaseTemplateInfoButtonStyle}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.LearnMore}"/>
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.LearnMore}"/>
    </Style>

    <Style TargetType="Button" x:Key="MoreInfoButtonStyle" BasedOn="{StaticResource BlackBaseTemplateInfoButtonStyle}">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Content">
            <Setter.Value>
                <Grid>
                    <TextBlock Text="&#xECCA;" FontSize="25" Style="{StaticResource IconButtonTextStyle}"/>
                    <TextBlock Text="{Binding ToggleButtonIcon}" FontSize="12" Style="{StaticResource IconButtonTextStyle}" />
                </Grid>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.LearnMore}"/>
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.LearnMore}"/>
    </Style>



    <Style TargetType="Button" x:Key="TogglePaneButtonStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsEnabled}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="contentPresenter" Property="Opacity" Value="0.2"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource TogglePaneButtonStyle}" x:Key="BlackTogglePanelButtonStyle">
        <Setter Property="Foreground" Value="{StaticResource UIBlack}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0,1,0,1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleBlueGrid}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource UIBlueColor}" Opacity="0.2"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource UIBlueColor}" Opacity="0.4"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource TogglePaneButtonStyle}" x:Key="BlueTogglePanelButtonStyle">
        <Setter Property="Foreground" Value="{StaticResource UIWhite}"/>
        <Setter Property="Background" Value="{StaticResource UIBlue}"/>
        <Setter Property="BorderThickness" Value="1,1,0,1"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleWhiteGrid}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource UIBlueColor}" Opacity="0.8"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPressed}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Background">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource UIBlueColor}" Opacity="0.6"/>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource BlackTogglePanelButtonStyle}" x:Key="DragAndDropTogglePaneButtonStyle">
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <Style TargetType="Button" x:Key="TopBarMenuStyle">
        <Setter Property="Foreground" Value="{StaticResource UIWhite}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Width" Value="50" />
        <Setter Property="AutomationProperties.Name" Value="{x:Static res:StringRes.ButtonViewInfo}" />
        <Setter Property="ToolTip" Value="{x:Static res:StringRes.ButtonViewInfo}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleWhiteGrid}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid x:Name="mouseOverBackground" Visibility="Collapsed">
                                <Grid.Background>
                                    <SolidColorBrush Color="{StaticResource UIWhiteColor}" Opacity="0.4"/>
                                </Grid.Background>
                            </Grid>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="False"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="mouseOverBackground" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <DataTrigger.Setters>
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
                    <Setter Property="BorderThickness" Value="2" />
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                </DataTrigger.Setters>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="ZoomButtonStyle">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource UIGray}"/>
        <Setter Property="BorderBrush" Value="{StaticResource UIGray}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyleBlueGrid}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{StaticResource UIGrayColor}" Opacity="0.3"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsHighContrast, Source={x:Static services:SystemService.Instance}}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                <Setter Property="Background" Value="Transparent" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource ZoomButtonStyle}" x:Key="MoreZoomButtonStyle">
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock Text="+" FontSize="{StaticResource UI_M_FontSize}" FontWeight="Bold" Margin="0,-5,0,0"/>
            </Setter.Value>
        </Setter>    
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource ZoomButtonStyle}" x:Key="MinusZoomButtonStyle">
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock Text="-" FontSize="{StaticResource UI_M_FontSize}" FontWeight="Bold" Margin="0,-5,0,0"/>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
